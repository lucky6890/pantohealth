version: "3.8"

services:
  rabbitmq:
    image: rabbitmq:4.1.3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # Standard RabbitMQ port
      - "15672:15672" # RabbitMQ Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq # Persistent data for RabbitMQ
    networks:
      - signals_network

  mongodb:
    image: mongo:8
    container_name: mongodb
    ports:
      - "27017:27017" # Maps host port 27017 to container port 27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    networks:
      - signals_network
    volumes:
      - mongodb_data:/data/db # Persists data to a named volume

  signals-sender:
    build:
      context: ./signals-sender # Path to your first NestJS project
      dockerfile: Dockerfile
    container_name: signals_sender
    ports:
      - "3000:3000" # Expose port for the first NestJS app
    environment:
      RABBITMQ_HOST: rabbitmq # Connect to RabbitMQ via its service name
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin123
    depends_on:
      - rabbitmq
      - mongodb
    networks:
      - signals_network
    volumes:
      - ./signals-sender:/app # Mount local project for development

  signals-analyzer:
    build:
      context: ./signals-analyzer # Path to your second NestJS project
      dockerfile: Dockerfile
    container_name: signals_analyzer
    ports:
      - "3001:3000" # Expose a different port for the second NestJS app
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin123
    depends_on:
      - rabbitmq
      - mongodb
    networks:
      - signals_network
    volumes:
      - ./signals-analyzer:/app

volumes:
  rabbitmq_data:
  mongodb_data:

networks:
  signals_network:
    driver: bridge
